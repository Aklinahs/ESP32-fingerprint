//OLED library
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//Ethernet Module Library
#include <EthernetENC.h>
#include <EthernetClient.h>

//WIFI library
#include <WiFi.h>
#include <WebServer.h>
#include <AutoConnect.h>

//Fingerprint Library
#include <Adafruit_Fingerprint.h>

// Date and time functions using a DS1307 RTC connected via I2C and Wire lib
#include "RTClib.h"

//SD Card Library
#include "FS.h"
#include "SD.h"
#include "SPI.h"

//Declaring SPI Pins for SD Card Module and Creating a New Class for SD SPI
#define SD_MOSI      13
#define SD_MISO      27
#define SD_SCK       14
#define SD_CS_PIN 15
SPIClass SPISD(HSPI);

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

//Defining Image Parameters
#define Logo_width 73
#define Logo_height 64

#define connectingInternetIcon_width 41
#define connectingInternetIcon_height 41

#define hotspotIcon_width 41
#define hotspotIcon_height 41



//Fingerprint Scanner Device Token for Each Department
const char *device_token  = "04-001-004";
const int buzzer_pin = 2;

//Status Check Variables
int wifiOrEthernetStatus;
int portalStatus = 0;

//Setting Up Variables
int FingerID = 0;

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//Creating Ethernet NTP Client Objects
EthernetUDP ethernet_UDP;
unsigned int localPort = 8888;

//Ethernet Module Setting Up
byte mac[] = { 0xDE, 0xDE, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 177);
IPAddress timeSrvr(216, 239, 35, 0); //Google NTP Client Server for Ethernet
EthernetClient client;

//sets up the necessary objects for using the AutoConnect library with an instance of the WebServer class.
WebServer Server;
AutoConnect Portal(Server);
AutoConnectConfig Config;

//Setting Up ESP32 Hardware Serial 2 for the Fingerprint Scanner
HardwareSerial mySerial(2); //ESP32 Hardware Serial 2
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

//RTC Objects
RTC_DS1307 DS1307_RTC;

//SD card File object
File myFile;
uint8_t cardType;


void rootPage() {
  String  content =
    "<html>"
    "<head>"
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
    "<script type=\"text/javascript\">"
    "setTimeout(\"location.reload()\", 5000);"
    "</script>"
    "</head>"
    "<body>"
    "<h2 align=\"center\" style=\"color:black;margin:20px;\">FINGERPRINT SCANNER WIFI SETUP</h2>"

    "<p></p><p style=\"padding-top:15px;text-align:center\">" AUTOCONNECT_LINK(COG_24) "</p>"
    "</body>"
    "</html>";
  Server.send(200, "text/html", content);
}

void printOLED(String text, int time){
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  display.println(text);
  display.display();
  delay(time);
}

void setup() {
  //Declaring Buzzer as an Output
  pinMode(buzzer_pin, OUTPUT);

  //Buzzer Startup Tone
  digitalWrite(buzzer_pin, HIGH);
  delay(300);
  digitalWrite(buzzer_pin, LOW);
  delay(60);
  digitalWrite(buzzer_pin, HIGH);
  delay(100);
  digitalWrite(buzzer_pin, LOW);

  Serial.begin(115200);

  //Test OLED
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // infinity loop
  }

  printOLED("Starting", 200);
  printOLED("Starting.", 200);
  printOLED("Starting..", 200);
  printOLED("Starting...", 200);
  printOLED("Starting....", 200);

  logoMsg();
  delay(2000);

  ScannerVersionMsg();
  FirmwareVersionMsg();

  /*Initialize Ethernet Module.
    If Module Initiation & Ethernet Cable Connected Ethernet Mode Enabled
    If Not WiFi Mode Will be Enabled.
  */
  connectingInternetIcon();
  Ethernet.init(5);
  Serial.println("Trying to Connect Ethernet");
  Ethernet.begin(mac, ip);

  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println("Ethernet Hardware was not found.  Sorry, can't run without hardware..");
    ethernetErrorSPIMsg();
    wifiOrEthernetStatus = 1;
  }
  if (Ethernet.hardwareStatus() != EthernetNoHardware) {
    Serial.println("Ethernet Hardware Found..");
  }
  delay(5000);
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println("Ethernet cable is not connected.");
    wifiOrEthernetStatus = 1; // 1 for WiFi 0 for Ethernet
  }
  if (Ethernet.linkStatus() == LinkON) {
    Serial.println("Ethernet cable is connected.");
    ConnectedToEthernetMsg();
    wifiOrEthernetStatus = 0;
    //Start UDP
    ethernet_UDP.begin(localPort);
    Serial.println("Ethernet UDP Start....");

  }
  if (wifiOrEthernetStatus == 1) {
    //Execute Connect to WiFi Function
    connectToWiFi();
  }

  //Start Communication between Fingerprint Scanner and ESP32
  finger.begin(57600);

  //Display if the Fingerprint Scanner found in PC Serial Port
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor!");
  }

  //Display Registered Fingerprint Count in PC Serial Port
  finger.getTemplateCount();
  Serial.print("Sensor contains ");
  Serial.print(finger.templateCount);
  Serial.println(" Fingerprint IDs");

  if (!DS1307_RTC.begin()) {
    rtcCheckMsgError();
    Serial.println("Couldn't find RTC");
  } else {
    Serial.println("RTC - OK");
    rtcCheckMsgOk();
  }

  //Initialize SD card. Trying this for two times..
  SPISD.begin(SD_SCK, SD_MISO, SD_MOSI);
  Serial.println("Initializing SD card...");

  if (!SD.begin(SD_CS_PIN, SPISD)) {
    Serial.println("Card Mount Failed");
    delay(1000);
    SPISD.begin(SD_SCK, SD_MISO, SD_MOSI);
    if (!SD.begin(SD_CS_PIN, SPISD)) {
      Serial.println("Card Mount Failed Again");
    }
  }
  cardType = SD.cardType();
  sdMountMsg();
  delay(10000);

}

void loop() {
  // put your main code here, to run repeatedly:

}

///http://172.217.28.1/_ac

void connectToWiFi() {

  printOLED("Wifi", 1000);

  Config.autoReconnect = true; //the library will automatically attempt to reconnect to a previously configured WiFi network if the connection is lost.
  Config.apid = "FingerPrint";
  Config.psk = "12345678";
  Config.hostName = device_token;
  Config.portalTimeout = 2000; //captive portal will be active before it times out. If the user does not connect to a WiFi network within this timeout period, the captive portal will close.
  Config.retainPortal = false; //captive portal page will be cleared after the device successfully connects to the Wi-Fi network.
  Portal.config(Config);
  Server.on("/", rootPage);

  Serial.println("Creating portal and trying to connect...");

  //AutoConnect portal has successfully connected to a WiFi network.
  if (Portal.begin()) {
    Serial.println("WiFi connected: " + WiFi.localIP().toString());
    Serial.println(WiFi.getHostname());
    connectedToWiFiMsg();
    portalStatus = 1;

    //If the ESP32 is in AP mode, disconnects the soft AP and disables the AP mode.
    if (WiFi.getMode() & WIFI_AP) {
        printOLED("AP turnoffed", 1000);
        WiFi.softAPdisconnect(true);
        WiFi.enableAP(false);
    }
  }

  // failed connection attempt
  if (portalStatus == 0) {
    hotspotIcon();
    Config.portalTimeout = 120000;
    Portal.config(Config);

    if (Portal.begin()) {
      portalStatus = 1;
      Serial.println("WiFi connected: " + WiFi.localIP().toString());
      connectedToWiFiMsg();
      Serial.println(WiFi.getHostname());
      
      if (WiFi.getMode() & WIFI_AP) {
        WiFi.softAPdisconnect(true);
        WiFi.enableAP(false);
      }
    }

    if (portalStatus == 0) {
      ESP.restart();
    }

  }

  delay(1000);
}

//Display Messages
void logoMsg() {
  const uint8_t PROGMEM LogoBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
    0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xfc, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x3f, 0xff,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xfc, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x01, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc,
    0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xfc, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x07,
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0xf8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc,
    0x00, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xfc, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x1f, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3f, 0xfd, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff,
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
    0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80,
    0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x07, 0x0e, 0x00, 0x30,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x30, 0x00, 0x00, 0x30, 0x1f, 0x3e, 0x66,
    0x67, 0x8e, 0x3e, 0x3c, 0x78, 0x00, 0x30, 0x1c, 0x77, 0x66, 0x67, 0x9e, 0x07, 0x3c, 0xcc, 0x00,
    0x30, 0x18, 0x63, 0x37, 0x66, 0xff, 0x07, 0x30, 0xcc, 0x00, 0x30, 0x18, 0x7f, 0x3f, 0xe6, 0xf3,
    0x3f, 0x31, 0xfc, 0x00, 0x38, 0x18, 0x60, 0x3d, 0xc6, 0x73, 0x73, 0x30, 0xc0, 0x00, 0x1f, 0x98,
    0x70, 0x19, 0xc6, 0x63, 0x73, 0x30, 0xe0, 0x00, 0x0f, 0xd8, 0x3e, 0x19, 0x86, 0x03, 0x3f, 0x3c,
    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.drawBitmap( 28, 1, LogoBits, Logo_width, Logo_height, WHITE);
  display.display();
}

void ScannerVersionMsg() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(5, 0);
  display.println("CrewMate");
  display.setTextSize(1);
  display.setCursor(5, 22);
  display.println("Model - CM-FSv2");
  display.display();
}

void FirmwareVersionMsg() {
  display.setCursor(5, 32);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print("Firmware - ");
  display.println("1.3");
  display.display();
}

void ethernetErrorSPIMsg() {
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("");
  display.println("E.net Hardware - Fail");
  display.println("");
  display.println("WiFi Mode Enabled");
  display.display();
}

void ConnectedToEthernetMsg() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  display.println("Connected to..");
  display.println("");
  display.setTextSize(2);
  display.println("Ethernet");
  display.display();
  delay(1000);
}

void connectingInternetIcon() {
  const unsigned char connectingInternetBits [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xc0, 0x00,
    0x03, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x03, 0x40, 0x00, 0x01, 0x60, 0x00, 0x03, 0x40, 0x00, 0x01,
    0x60, 0x00, 0x03, 0x40, 0x00, 0x01, 0x60, 0x00, 0x03, 0x40, 0x7f, 0x01, 0x60, 0x00, 0x03, 0x41,
    0x80, 0xc1, 0x60, 0x00, 0x03, 0x43, 0x1c, 0x61, 0x60, 0x00, 0x03, 0x40, 0x63, 0x01, 0x60, 0x00,
    0x03, 0x40, 0x80, 0x81, 0x60, 0x00, 0x03, 0x40, 0x3e, 0x01, 0x60, 0x00, 0x03, 0x40, 0x22, 0x01,
    0x60, 0x00, 0x03, 0x40, 0x08, 0x01, 0x60, 0x00, 0x03, 0x40, 0x08, 0x01, 0x60, 0x00, 0x03, 0x40,
    0x00, 0x01, 0x60, 0x00, 0x03, 0x40, 0x00, 0x01, 0x60, 0x00, 0x03, 0x40, 0x00, 0x01, 0x60, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xf0, 0x00, 0x07, 0xfe, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x70, 0x00, 0xff, 0x02, 0x00, 0x20, 0x58,
    0x24, 0x81, 0x02, 0x00, 0x20, 0x50, 0x00, 0x81, 0x02, 0x00, 0x20, 0x20, 0x00, 0xff, 0x02, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(14, 0);
  display.setTextColor(WHITE);
  display.println("Trying to Connect ");
  display.setTextColor(WHITE);
  display.drawBitmap( 43, 10, connectingInternetBits, connectingInternetIcon_width, connectingInternetIcon_height, WHITE);
  display.setCursor(24, 55);
  display.println("WiFi/Ethernet");
  display.display();
}

void hotspotIcon() {
  const uint8_t PROGMEM hotspotIconBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0,
    0x00, 0x00, 0x07, 0xe0, 0x03, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x78, 0x00, 0x00, 0x1e, 0x00, 0x3c, 0x38, 0x00, 0x00, 0x1c, 0x00, 0xfe, 0x38, 0xc0, 0x00,
    0x1c, 0x03, 0xff, 0x1c, 0xe0, 0x00, 0x1c, 0x07, 0xc0, 0x1c, 0xf0, 0x00, 0x1c, 0x07, 0x00, 0x1c,
    0x78, 0x00, 0x1c, 0x0e, 0x00, 0x1c, 0x38, 0x00, 0x1c, 0x0e, 0x00, 0x38, 0x1c, 0x00, 0x0e, 0x1c,
    0x00, 0x38, 0x1c, 0x00, 0x0f, 0x1c, 0x00, 0x70, 0x1c, 0x00, 0x07, 0x1c, 0x01, 0xf0, 0x1c, 0x00,
    0x03, 0x9c, 0x7f, 0xe0, 0x1c, 0x00, 0x01, 0x8e, 0x3f, 0x80, 0x1c, 0x00, 0x00, 0x0e, 0x3e, 0x00,
    0x3c, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x80, 0x00, 0x78, 0x00, 0x00, 0x03,
    0xe0, 0x03, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(18, 0);
  display.setTextColor(WHITE);
  display.println("Configure WiFi");
  display.setTextColor(WHITE);
  display.drawBitmap( 38, 10, hotspotIconBits, hotspotIcon_width, hotspotIcon_height, WHITE);
  display.setCursor(15, 55);
  display.println("Hotspot Enabled");
  display.display();
}

void connectedToWiFiMsg() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  display.println("Connected..");
  display.println("");
  display.setTextSize(2);
  display.println(WiFi.SSID().substring(0, 10));
  display.display();
}

void rtcCheckMsgOk() {
  display.setCursor(5, 42);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("RTC - OK");
  display.display();
}

void rtcCheckMsgError() {
  display.setCursor(5, 42);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("RTC - N/A");
  display.display();
}

void sdMountMsg() {
  display.setCursor(5, 52);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  if (cardType == CARD_NONE) {
    display.println("SD - Mount Error");
  }
  if (cardType == CARD_MMC) {
    display.print("SD - OK - ");
    display.println("MMC");
  } else if (cardType == CARD_SD) {
    display.print("SD - OK - ");
    display.println("SDSC");
  } else if (cardType == CARD_SDHC) {
    display.print("SD - OK - ");
    display.println("SDHC");
  }
  display.display();
  delay(1000);
}
